// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Node node
//
// swagger:model node
type Node struct {

	// api key
	// Required: true
	APIKey *string `json:"apiKey"`

	// claimed by
	ClaimedBy string `json:"claimedBy,omitempty"`

	// node size
	// Required: true
	// Enum: [tiny small medium large huge massive]
	NodeSize *string `json:"nodeSize"`

	// node type
	// Required: true
	// Enum: [bone carbon coal gems ice iron obsidian platinum silver stone]
	NodeType *string `json:"nodeType"`

	// room Id
	// Required: true
	RoomID *int64 `json:"roomId"`
}

// Validate validates this node
func (m *Node) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Node) validateAPIKey(formats strfmt.Registry) error {

	if err := validate.Required("apiKey", "body", m.APIKey); err != nil {
		return err
	}

	return nil
}

var nodeTypeNodeSizePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tiny","small","medium","large","huge","massive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodeTypeNodeSizePropEnum = append(nodeTypeNodeSizePropEnum, v)
	}
}

const (

	// NodeNodeSizeTiny captures enum value "tiny"
	NodeNodeSizeTiny string = "tiny"

	// NodeNodeSizeSmall captures enum value "small"
	NodeNodeSizeSmall string = "small"

	// NodeNodeSizeMedium captures enum value "medium"
	NodeNodeSizeMedium string = "medium"

	// NodeNodeSizeLarge captures enum value "large"
	NodeNodeSizeLarge string = "large"

	// NodeNodeSizeHuge captures enum value "huge"
	NodeNodeSizeHuge string = "huge"

	// NodeNodeSizeMassive captures enum value "massive"
	NodeNodeSizeMassive string = "massive"
)

// prop value enum
func (m *Node) validateNodeSizeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nodeTypeNodeSizePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Node) validateNodeSize(formats strfmt.Registry) error {

	if err := validate.Required("nodeSize", "body", m.NodeSize); err != nil {
		return err
	}

	// value enum
	if err := m.validateNodeSizeEnum("nodeSize", "body", *m.NodeSize); err != nil {
		return err
	}

	return nil
}

var nodeTypeNodeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bone","carbon","coal","gems","ice","iron","obsidian","platinum","silver","stone"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodeTypeNodeTypePropEnum = append(nodeTypeNodeTypePropEnum, v)
	}
}

const (

	// NodeNodeTypeBone captures enum value "bone"
	NodeNodeTypeBone string = "bone"

	// NodeNodeTypeCarbon captures enum value "carbon"
	NodeNodeTypeCarbon string = "carbon"

	// NodeNodeTypeCoal captures enum value "coal"
	NodeNodeTypeCoal string = "coal"

	// NodeNodeTypeGems captures enum value "gems"
	NodeNodeTypeGems string = "gems"

	// NodeNodeTypeIce captures enum value "ice"
	NodeNodeTypeIce string = "ice"

	// NodeNodeTypeIron captures enum value "iron"
	NodeNodeTypeIron string = "iron"

	// NodeNodeTypeObsidian captures enum value "obsidian"
	NodeNodeTypeObsidian string = "obsidian"

	// NodeNodeTypePlatinum captures enum value "platinum"
	NodeNodeTypePlatinum string = "platinum"

	// NodeNodeTypeSilver captures enum value "silver"
	NodeNodeTypeSilver string = "silver"

	// NodeNodeTypeStone captures enum value "stone"
	NodeNodeTypeStone string = "stone"
)

// prop value enum
func (m *Node) validateNodeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nodeTypeNodeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Node) validateNodeType(formats strfmt.Registry) error {

	if err := validate.Required("nodeType", "body", m.NodeType); err != nil {
		return err
	}

	// value enum
	if err := m.validateNodeTypeEnum("nodeType", "body", *m.NodeType); err != nil {
		return err
	}

	return nil
}

func (m *Node) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("roomId", "body", m.RoomID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this node based on context it is used
func (m *Node) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Node) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Node) UnmarshalBinary(b []byte) error {
	var res Node
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
