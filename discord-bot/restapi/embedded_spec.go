// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "HTTP server in Go with Swagger endpoints definition.",
    "title": "go-rest-api",
    "version": "0.1.0"
  },
  "paths": {
    "/": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "operationId": "returnPing",
        "responses": {
          "200": {
            "description": "OK message.",
            "schema": {
              "type": "string",
              "enum": [
                "OK"
              ]
            }
          }
        }
      }
    },
    "/node/{roomNum}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "operationId": "getNode",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Room number",
            "name": "roomNum",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK message.",
            "schema": {
              "$ref": "#/definitions/node"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/post": {
      "post": {
        "produces": [
          "text/plain"
        ],
        "operationId": "postMessage",
        "parameters": [
          {
            "description": "Message to post",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK message.",
            "schema": {
              "type": "string",
              "enum": [
                "OK"
              ]
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/summary": {
      "get": {
        "produces": [
          "application/json"
        ],
        "operationId": "getSummary",
        "responses": {
          "200": {
            "description": "OK message.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/node"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "node": {
      "type": "object",
      "required": [
        "apiKey",
        "nodeType",
        "nodeSize",
        "roomId"
      ],
      "properties": {
        "apiKey": {
          "type": "string"
        },
        "claimedBy": {
          "type": "string"
        },
        "nodeSize": {
          "type": "string",
          "enum": [
            "tiny",
            "small",
            "medium",
            "large",
            "huge",
            "massive"
          ]
        },
        "nodeType": {
          "type": "string",
          "enum": [
            "bone",
            "carbon",
            "coal",
            "gems",
            "ice",
            "iron",
            "obsidian",
            "platinum",
            "silver",
            "stone"
          ]
        },
        "roomId": {
          "type": "integer",
          "format": "int64"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "HTTP server in Go with Swagger endpoints definition.",
    "title": "go-rest-api",
    "version": "0.1.0"
  },
  "paths": {
    "/": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "operationId": "returnPing",
        "responses": {
          "200": {
            "description": "OK message.",
            "schema": {
              "type": "string",
              "enum": [
                "OK"
              ]
            }
          }
        }
      }
    },
    "/node/{roomNum}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "operationId": "getNode",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Room number",
            "name": "roomNum",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK message.",
            "schema": {
              "$ref": "#/definitions/node"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/post": {
      "post": {
        "produces": [
          "text/plain"
        ],
        "operationId": "postMessage",
        "parameters": [
          {
            "description": "Message to post",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK message.",
            "schema": {
              "type": "string",
              "enum": [
                "OK"
              ]
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/summary": {
      "get": {
        "produces": [
          "application/json"
        ],
        "operationId": "getSummary",
        "responses": {
          "200": {
            "description": "OK message.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/node"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "node": {
      "type": "object",
      "required": [
        "apiKey",
        "nodeType",
        "nodeSize",
        "roomId"
      ],
      "properties": {
        "apiKey": {
          "type": "string"
        },
        "claimedBy": {
          "type": "string"
        },
        "nodeSize": {
          "type": "string",
          "enum": [
            "tiny",
            "small",
            "medium",
            "large",
            "huge",
            "massive"
          ]
        },
        "nodeType": {
          "type": "string",
          "enum": [
            "bone",
            "carbon",
            "coal",
            "gems",
            "ice",
            "iron",
            "obsidian",
            "platinum",
            "silver",
            "stone"
          ]
        },
        "roomId": {
          "type": "integer",
          "format": "int64"
        }
      }
    }
  }
}`))
}
